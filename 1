import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt
import numpy as np

df = pd.read_csv("uber.csv")
df.head()

df.drop(columns=['Unnamed: 0','key'],inplace=True)

df.info()

df.dropna(how='any',inplace=True)

df.isnull().sum()

df= df.drop(['pickup_datetime'], axis = 1)
df

df.describe()

df["dropoff_longitude"]= df["dropoff_longitude"].fillna(df['dropoff_longitude'].mean())
df["dropoff_latitude"]= df["dropoff_latitude"].fillna(df['dropoff_latitude'].mean())

def haversine (lon_1, lon_2, lat_1, lat_2):
    lon_1, lon_2, lat_1, lat_2 = map(np.radians, [lon_1, lon_2, lat_1, lat_2])
    diff_lon = lon_2 - lon_1
    diff_lat = lat_2 - lat_1
    km = 2 * 6371 * np.arcsin(np.sqrt(np.sin(diff_lat/2.0)**2 + np.cos(lat_1) * np.cos(lat_2) * np.sin(diff_lon/2.0)**2))
    return km

df['distance'] = haversine(df['pickup_longitude'],df['dropoff_longitude'],df['pickup_latitude'],df['dropoff_latitude'])

df.describe()

df.replace(to_replace = 0, value = df['passenger_count'].mean(), inplace=True)
df.replace(to_replace = 0, value = df['distance'].mean(), inplace=True)
df[df['fare_amount'] <= 0] = df['fare_amount'].mean()

df.describe()

corr_matrix = df.corr()
corr_matrix

corr_matrix = df.corr()
corr_matrix

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=42)
print(X_train.shape, y_train.shape, X_test.shape, y_test.shape)

from sklearn.linear_model import LinearRegression
linear_regression = LinearRegression().fit(X_train, y_train)

linear_regression.score(X_test, y_test)

y_pred = linear_regression.predict(X_test)

result = pd.DataFrame()
result['Actual'], result['Predicted'] = y_test, y_pred
result.sample(10)

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('R Squared (R²):', np.sqrt(metrics.r2_score(y_test, y_pred)))

from sklearn.ensemble import RandomForestRegressor
random_forest = RandomForestRegressor(n_estimators = 10, random_state = 42)
random_forest.fit(X_train, y_train)

random_forest.score(X_test, y_test)

y_pred = random_forest.predict(X_test)
result = pd.DataFrame()
result['Actual'], result['Predicted'] = y_test, y_pred
result.sample(10)

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('R Squared (R²):', np.sqrt(metrics.r2_score(y_test, y_pred)))














